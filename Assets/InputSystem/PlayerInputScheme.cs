//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/PlayerInputScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PlayerInput
{
    public partial class @PlayerInputScheme : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputScheme()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputScheme"",
    ""maps"": [
        {
            ""name"": ""PlayerControl"",
            ""id"": ""939cc891-7637-4921-98aa-f045dab4b2d9"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ff765002-f552-4459-b2cb-e0f63fecae32"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""isRunning"",
                    ""type"": ""Button"",
                    ""id"": ""9800ac08-f74e-49ee-85b7-a2815440a346"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""450b748e-6c33-4ef0-abb8-df716b82cf3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""78d90272-9e2a-43f8-978d-98592c14a7ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Intaract"",
                    ""type"": ""Button"",
                    ""id"": ""19837682-50f2-4c81-9ea7-a204e21ee52e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""85b2068b-04a0-4ca4-b439-8f0d257e1882"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ef7ad39c-a6dd-4e0f-b497-126f86f7d9f6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""54214e8c-b1f0-475d-8fc1-5c2a483c727c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1b19375b-2d50-4827-ba23-40d99915f10e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5b4124ae-ccd2-440e-bc9b-0b57a1ace2f6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""7e307b7a-b40c-48ac-a309-17f7a303201f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""37035b3a-d3f2-408b-87a6-131e9a7c99d3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bb801d5a-eecb-4773-a1c8-62af2fe6715d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0066148e-d1dc-4fa7-b72a-a0fadbf2252a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""83db64b4-4f6e-450f-895d-3a42a756f86a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c35ff02f-a2ed-4b12-bac3-2962f623c748"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68054dfa-b2b4-4723-8e01-22d64dde2cbe"",
                    ""path"": ""<Keyboard>/capsLock"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""isRunning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8ef62e2-a0ec-4eb7-89be-1187002c5c95"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""isRunning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c30114d6-b097-4495-8c0c-829d26532528"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65d1fe9c-2081-49e2-93f9-927017016cfc"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2a5dc18-3d19-4a7e-af80-6f5e64ac6dd0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Intaract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6784d01-0170-4e6d-a39f-918b2f973ea7"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Intaract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5f9a665-7fcd-4ba8-804c-4ee6e78699fc"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63bbc159-a479-42d5-b913-8d29120d1bb8"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraControl"",
            ""id"": ""519ad543-3c08-42e8-bed4-9e13fdbfc92c"",
            ""actions"": [
                {
                    ""name"": ""MouseMovement"",
                    ""type"": ""Value"",
                    ""id"": ""a924b1df-0007-406d-a26e-0f7a574f22c2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""9bcc3278-679d-4b9c-815e-7a96c4da801b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotationSticks"",
                    ""type"": ""Value"",
                    ""id"": ""b405d617-6d48-408a-a066-c8f7e0ba0ee6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReadyToZoom"",
                    ""type"": ""Button"",
                    ""id"": ""cf767db0-447b-49e7-9d2a-845eb5b64c2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomIn"",
                    ""type"": ""Button"",
                    ""id"": ""b95482fe-018e-45a2-a711-a017ef07f90e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomOut"",
                    ""type"": ""Button"",
                    ""id"": ""ea6121d9-1646-4f83-a77f-f16c08a6afcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7e35461-ec17-4b64-aeb4-69bdef508a83"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MouseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68f775d0-a570-4b72-b68f-e5641b9cd798"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87137cf6-6854-46d2-a9ed-fe5665f9798d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RotationSticks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4ef6717-3324-4cd2-ba31-308fc92d498e"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ReadyToZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ddd0031-1f96-4729-a754-e84acf40aa79"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ZoomIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e34d9b5-de0d-480b-a4c9-230665de6f8b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ApplicationControl"",
            ""id"": ""34d51931-afde-4e8b-a503-7d8825595cd1"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""36d7a0b9-f66b-4da4-985e-ca871ac90791"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e26e6917-cb9c-4f53-85d1-27f900825ce2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3f19c5d-aacb-42a7-8b79-d98602fccaea"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InventoryControl"",
            ""id"": ""5c042f3d-b086-4d60-a79b-e4d6f44cb36b"",
            ""actions"": [
                {
                    ""name"": ""OpenCloseInventory"",
                    ""type"": ""Button"",
                    ""id"": ""13bfbd15-35dc-4065-a98b-dbce81aea80f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key1"",
                    ""type"": ""Button"",
                    ""id"": ""219db42c-fd51-4806-99d4-f34613161ce0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key2"",
                    ""type"": ""Button"",
                    ""id"": ""490e6fe9-8d90-4b3c-87b2-566ecdc18590"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key3"",
                    ""type"": ""Button"",
                    ""id"": ""6ce549b3-706d-475f-9185-4a505cd7b73f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key4"",
                    ""type"": ""Button"",
                    ""id"": ""893f5a99-fa51-4fe7-8d1e-11e829d84aba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key5"",
                    ""type"": ""Button"",
                    ""id"": ""3299c4ec-aa91-4e89-8c1e-f4b369d90a1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key6"",
                    ""type"": ""Button"",
                    ""id"": ""b689bbdd-c73f-454b-adce-b1904c9511a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key7"",
                    ""type"": ""Button"",
                    ""id"": ""0ff6e13f-4ffb-4de9-97b3-8636906dcfbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key8"",
                    ""type"": ""Button"",
                    ""id"": ""fc05cce8-606b-4592-8c78-b995bbcf9c3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a6951f8b-ad28-4892-894a-ea7436b95d48"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""OpenCloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f609cc6-cdc0-470f-9792-57166b327af1"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""OpenCloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""469d82ab-795c-4061-ba74-0f8a16472287"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9251154-2094-430e-9925-5ea15cb94b6d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7da881f5-d7bb-4bf6-8c4d-5bc7a87b4688"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51a3f551-f491-4a8c-b223-0a853872d15d"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""490fc7c4-d085-4754-8502-7a84c1dc0cc8"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51fbcaea-f07e-4d2f-ba1b-888dbd53006a"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08c273e0-5f3e-4086-8484-c06fb10575ca"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9998be85-b5f1-4ca8-bbec-6a4746b9f303"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""4beb2adc-ed30-464c-bf5c-d5b72841b867"",
            ""actions"": [
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""1286ea09-4e27-4136-b386-a7dc7e93d9c8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""e59e4a22-a27e-445e-8f5d-8e409e2def20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f66a0b9-e7f3-4233-98ef-87b12d4f05bb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2030f5af-2aff-4d29-9377-35189d9481ff"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // PlayerControl
            m_PlayerControl = asset.FindActionMap("PlayerControl", throwIfNotFound: true);
            m_PlayerControl_Movement = m_PlayerControl.FindAction("Movement", throwIfNotFound: true);
            m_PlayerControl_isRunning = m_PlayerControl.FindAction("isRunning", throwIfNotFound: true);
            m_PlayerControl_Dash = m_PlayerControl.FindAction("Dash", throwIfNotFound: true);
            m_PlayerControl_Jump = m_PlayerControl.FindAction("Jump", throwIfNotFound: true);
            m_PlayerControl_Intaract = m_PlayerControl.FindAction("Intaract", throwIfNotFound: true);
            // CameraControl
            m_CameraControl = asset.FindActionMap("CameraControl", throwIfNotFound: true);
            m_CameraControl_MouseMovement = m_CameraControl.FindAction("MouseMovement", throwIfNotFound: true);
            m_CameraControl_Zoom = m_CameraControl.FindAction("Zoom", throwIfNotFound: true);
            m_CameraControl_RotationSticks = m_CameraControl.FindAction("RotationSticks", throwIfNotFound: true);
            m_CameraControl_ReadyToZoom = m_CameraControl.FindAction("ReadyToZoom", throwIfNotFound: true);
            m_CameraControl_ZoomIn = m_CameraControl.FindAction("ZoomIn", throwIfNotFound: true);
            m_CameraControl_ZoomOut = m_CameraControl.FindAction("ZoomOut", throwIfNotFound: true);
            // ApplicationControl
            m_ApplicationControl = asset.FindActionMap("ApplicationControl", throwIfNotFound: true);
            m_ApplicationControl_Quit = m_ApplicationControl.FindAction("Quit", throwIfNotFound: true);
            // InventoryControl
            m_InventoryControl = asset.FindActionMap("InventoryControl", throwIfNotFound: true);
            m_InventoryControl_OpenCloseInventory = m_InventoryControl.FindAction("OpenCloseInventory", throwIfNotFound: true);
            m_InventoryControl_Key1 = m_InventoryControl.FindAction("Key1", throwIfNotFound: true);
            m_InventoryControl_Key2 = m_InventoryControl.FindAction("Key2", throwIfNotFound: true);
            m_InventoryControl_Key3 = m_InventoryControl.FindAction("Key3", throwIfNotFound: true);
            m_InventoryControl_Key4 = m_InventoryControl.FindAction("Key4", throwIfNotFound: true);
            m_InventoryControl_Key5 = m_InventoryControl.FindAction("Key5", throwIfNotFound: true);
            m_InventoryControl_Key6 = m_InventoryControl.FindAction("Key6", throwIfNotFound: true);
            m_InventoryControl_Key7 = m_InventoryControl.FindAction("Key7", throwIfNotFound: true);
            m_InventoryControl_Key8 = m_InventoryControl.FindAction("Key8", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
            m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerControl
        private readonly InputActionMap m_PlayerControl;
        private IPlayerControlActions m_PlayerControlActionsCallbackInterface;
        private readonly InputAction m_PlayerControl_Movement;
        private readonly InputAction m_PlayerControl_isRunning;
        private readonly InputAction m_PlayerControl_Dash;
        private readonly InputAction m_PlayerControl_Jump;
        private readonly InputAction m_PlayerControl_Intaract;
        public struct PlayerControlActions
        {
            private @PlayerInputScheme m_Wrapper;
            public PlayerControlActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerControl_Movement;
            public InputAction @isRunning => m_Wrapper.m_PlayerControl_isRunning;
            public InputAction @Dash => m_Wrapper.m_PlayerControl_Dash;
            public InputAction @Jump => m_Wrapper.m_PlayerControl_Jump;
            public InputAction @Intaract => m_Wrapper.m_PlayerControl_Intaract;
            public InputActionMap Get() { return m_Wrapper.m_PlayerControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerControlActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerControlActions instance)
            {
                if (m_Wrapper.m_PlayerControlActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnMovement;
                    @isRunning.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnIsRunning;
                    @isRunning.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnIsRunning;
                    @isRunning.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnIsRunning;
                    @Dash.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnDash;
                    @Dash.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnDash;
                    @Dash.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnDash;
                    @Jump.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnJump;
                    @Intaract.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnIntaract;
                    @Intaract.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnIntaract;
                    @Intaract.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnIntaract;
                }
                m_Wrapper.m_PlayerControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @isRunning.started += instance.OnIsRunning;
                    @isRunning.performed += instance.OnIsRunning;
                    @isRunning.canceled += instance.OnIsRunning;
                    @Dash.started += instance.OnDash;
                    @Dash.performed += instance.OnDash;
                    @Dash.canceled += instance.OnDash;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Intaract.started += instance.OnIntaract;
                    @Intaract.performed += instance.OnIntaract;
                    @Intaract.canceled += instance.OnIntaract;
                }
            }
        }
        public PlayerControlActions @PlayerControl => new PlayerControlActions(this);

        // CameraControl
        private readonly InputActionMap m_CameraControl;
        private ICameraControlActions m_CameraControlActionsCallbackInterface;
        private readonly InputAction m_CameraControl_MouseMovement;
        private readonly InputAction m_CameraControl_Zoom;
        private readonly InputAction m_CameraControl_RotationSticks;
        private readonly InputAction m_CameraControl_ReadyToZoom;
        private readonly InputAction m_CameraControl_ZoomIn;
        private readonly InputAction m_CameraControl_ZoomOut;
        public struct CameraControlActions
        {
            private @PlayerInputScheme m_Wrapper;
            public CameraControlActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
            public InputAction @MouseMovement => m_Wrapper.m_CameraControl_MouseMovement;
            public InputAction @Zoom => m_Wrapper.m_CameraControl_Zoom;
            public InputAction @RotationSticks => m_Wrapper.m_CameraControl_RotationSticks;
            public InputAction @ReadyToZoom => m_Wrapper.m_CameraControl_ReadyToZoom;
            public InputAction @ZoomIn => m_Wrapper.m_CameraControl_ZoomIn;
            public InputAction @ZoomOut => m_Wrapper.m_CameraControl_ZoomOut;
            public InputActionMap Get() { return m_Wrapper.m_CameraControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraControlActions set) { return set.Get(); }
            public void SetCallbacks(ICameraControlActions instance)
            {
                if (m_Wrapper.m_CameraControlActionsCallbackInterface != null)
                {
                    @MouseMovement.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnMouseMovement;
                    @MouseMovement.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnMouseMovement;
                    @MouseMovement.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnMouseMovement;
                    @Zoom.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnZoom;
                    @Zoom.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnZoom;
                    @Zoom.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnZoom;
                    @RotationSticks.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnRotationSticks;
                    @RotationSticks.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnRotationSticks;
                    @RotationSticks.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnRotationSticks;
                    @ReadyToZoom.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnReadyToZoom;
                    @ReadyToZoom.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnReadyToZoom;
                    @ReadyToZoom.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnReadyToZoom;
                    @ZoomIn.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnZoomIn;
                    @ZoomIn.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnZoomIn;
                    @ZoomIn.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnZoomIn;
                    @ZoomOut.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnZoomOut;
                    @ZoomOut.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnZoomOut;
                    @ZoomOut.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnZoomOut;
                }
                m_Wrapper.m_CameraControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MouseMovement.started += instance.OnMouseMovement;
                    @MouseMovement.performed += instance.OnMouseMovement;
                    @MouseMovement.canceled += instance.OnMouseMovement;
                    @Zoom.started += instance.OnZoom;
                    @Zoom.performed += instance.OnZoom;
                    @Zoom.canceled += instance.OnZoom;
                    @RotationSticks.started += instance.OnRotationSticks;
                    @RotationSticks.performed += instance.OnRotationSticks;
                    @RotationSticks.canceled += instance.OnRotationSticks;
                    @ReadyToZoom.started += instance.OnReadyToZoom;
                    @ReadyToZoom.performed += instance.OnReadyToZoom;
                    @ReadyToZoom.canceled += instance.OnReadyToZoom;
                    @ZoomIn.started += instance.OnZoomIn;
                    @ZoomIn.performed += instance.OnZoomIn;
                    @ZoomIn.canceled += instance.OnZoomIn;
                    @ZoomOut.started += instance.OnZoomOut;
                    @ZoomOut.performed += instance.OnZoomOut;
                    @ZoomOut.canceled += instance.OnZoomOut;
                }
            }
        }
        public CameraControlActions @CameraControl => new CameraControlActions(this);

        // ApplicationControl
        private readonly InputActionMap m_ApplicationControl;
        private IApplicationControlActions m_ApplicationControlActionsCallbackInterface;
        private readonly InputAction m_ApplicationControl_Quit;
        public struct ApplicationControlActions
        {
            private @PlayerInputScheme m_Wrapper;
            public ApplicationControlActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
            public InputAction @Quit => m_Wrapper.m_ApplicationControl_Quit;
            public InputActionMap Get() { return m_Wrapper.m_ApplicationControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ApplicationControlActions set) { return set.Get(); }
            public void SetCallbacks(IApplicationControlActions instance)
            {
                if (m_Wrapper.m_ApplicationControlActionsCallbackInterface != null)
                {
                    @Quit.started -= m_Wrapper.m_ApplicationControlActionsCallbackInterface.OnQuit;
                    @Quit.performed -= m_Wrapper.m_ApplicationControlActionsCallbackInterface.OnQuit;
                    @Quit.canceled -= m_Wrapper.m_ApplicationControlActionsCallbackInterface.OnQuit;
                }
                m_Wrapper.m_ApplicationControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Quit.started += instance.OnQuit;
                    @Quit.performed += instance.OnQuit;
                    @Quit.canceled += instance.OnQuit;
                }
            }
        }
        public ApplicationControlActions @ApplicationControl => new ApplicationControlActions(this);

        // InventoryControl
        private readonly InputActionMap m_InventoryControl;
        private IInventoryControlActions m_InventoryControlActionsCallbackInterface;
        private readonly InputAction m_InventoryControl_OpenCloseInventory;
        private readonly InputAction m_InventoryControl_Key1;
        private readonly InputAction m_InventoryControl_Key2;
        private readonly InputAction m_InventoryControl_Key3;
        private readonly InputAction m_InventoryControl_Key4;
        private readonly InputAction m_InventoryControl_Key5;
        private readonly InputAction m_InventoryControl_Key6;
        private readonly InputAction m_InventoryControl_Key7;
        private readonly InputAction m_InventoryControl_Key8;
        public struct InventoryControlActions
        {
            private @PlayerInputScheme m_Wrapper;
            public InventoryControlActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
            public InputAction @OpenCloseInventory => m_Wrapper.m_InventoryControl_OpenCloseInventory;
            public InputAction @Key1 => m_Wrapper.m_InventoryControl_Key1;
            public InputAction @Key2 => m_Wrapper.m_InventoryControl_Key2;
            public InputAction @Key3 => m_Wrapper.m_InventoryControl_Key3;
            public InputAction @Key4 => m_Wrapper.m_InventoryControl_Key4;
            public InputAction @Key5 => m_Wrapper.m_InventoryControl_Key5;
            public InputAction @Key6 => m_Wrapper.m_InventoryControl_Key6;
            public InputAction @Key7 => m_Wrapper.m_InventoryControl_Key7;
            public InputAction @Key8 => m_Wrapper.m_InventoryControl_Key8;
            public InputActionMap Get() { return m_Wrapper.m_InventoryControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InventoryControlActions set) { return set.Get(); }
            public void SetCallbacks(IInventoryControlActions instance)
            {
                if (m_Wrapper.m_InventoryControlActionsCallbackInterface != null)
                {
                    @OpenCloseInventory.started -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnOpenCloseInventory;
                    @OpenCloseInventory.performed -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnOpenCloseInventory;
                    @OpenCloseInventory.canceled -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnOpenCloseInventory;
                    @Key1.started -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey1;
                    @Key1.performed -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey1;
                    @Key1.canceled -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey1;
                    @Key2.started -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey2;
                    @Key2.performed -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey2;
                    @Key2.canceled -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey2;
                    @Key3.started -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey3;
                    @Key3.performed -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey3;
                    @Key3.canceled -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey3;
                    @Key4.started -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey4;
                    @Key4.performed -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey4;
                    @Key4.canceled -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey4;
                    @Key5.started -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey5;
                    @Key5.performed -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey5;
                    @Key5.canceled -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey5;
                    @Key6.started -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey6;
                    @Key6.performed -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey6;
                    @Key6.canceled -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey6;
                    @Key7.started -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey7;
                    @Key7.performed -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey7;
                    @Key7.canceled -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey7;
                    @Key8.started -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey8;
                    @Key8.performed -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey8;
                    @Key8.canceled -= m_Wrapper.m_InventoryControlActionsCallbackInterface.OnKey8;
                }
                m_Wrapper.m_InventoryControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @OpenCloseInventory.started += instance.OnOpenCloseInventory;
                    @OpenCloseInventory.performed += instance.OnOpenCloseInventory;
                    @OpenCloseInventory.canceled += instance.OnOpenCloseInventory;
                    @Key1.started += instance.OnKey1;
                    @Key1.performed += instance.OnKey1;
                    @Key1.canceled += instance.OnKey1;
                    @Key2.started += instance.OnKey2;
                    @Key2.performed += instance.OnKey2;
                    @Key2.canceled += instance.OnKey2;
                    @Key3.started += instance.OnKey3;
                    @Key3.performed += instance.OnKey3;
                    @Key3.canceled += instance.OnKey3;
                    @Key4.started += instance.OnKey4;
                    @Key4.performed += instance.OnKey4;
                    @Key4.canceled += instance.OnKey4;
                    @Key5.started += instance.OnKey5;
                    @Key5.performed += instance.OnKey5;
                    @Key5.canceled += instance.OnKey5;
                    @Key6.started += instance.OnKey6;
                    @Key6.performed += instance.OnKey6;
                    @Key6.canceled += instance.OnKey6;
                    @Key7.started += instance.OnKey7;
                    @Key7.performed += instance.OnKey7;
                    @Key7.canceled += instance.OnKey7;
                    @Key8.started += instance.OnKey8;
                    @Key8.performed += instance.OnKey8;
                    @Key8.canceled += instance.OnKey8;
                }
            }
        }
        public InventoryControlActions @InventoryControl => new InventoryControlActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private IUIActions m_UIActionsCallbackInterface;
        private readonly InputAction m_UI_Point;
        private readonly InputAction m_UI_Click;
        public struct UIActions
        {
            private @PlayerInputScheme m_Wrapper;
            public UIActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
            public InputAction @Point => m_Wrapper.m_UI_Point;
            public InputAction @Click => m_Wrapper.m_UI_Click;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void SetCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterface != null)
                {
                    @Point.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                    @Point.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                    @Point.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                    @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                    @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                    @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                }
                m_Wrapper.m_UIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Point.started += instance.OnPoint;
                    @Point.performed += instance.OnPoint;
                    @Point.canceled += instance.OnPoint;
                    @Click.started += instance.OnClick;
                    @Click.performed += instance.OnClick;
                    @Click.canceled += instance.OnClick;
                }
            }
        }
        public UIActions @UI => new UIActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IPlayerControlActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnIsRunning(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnIntaract(InputAction.CallbackContext context);
        }
        public interface ICameraControlActions
        {
            void OnMouseMovement(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
            void OnRotationSticks(InputAction.CallbackContext context);
            void OnReadyToZoom(InputAction.CallbackContext context);
            void OnZoomIn(InputAction.CallbackContext context);
            void OnZoomOut(InputAction.CallbackContext context);
        }
        public interface IApplicationControlActions
        {
            void OnQuit(InputAction.CallbackContext context);
        }
        public interface IInventoryControlActions
        {
            void OnOpenCloseInventory(InputAction.CallbackContext context);
            void OnKey1(InputAction.CallbackContext context);
            void OnKey2(InputAction.CallbackContext context);
            void OnKey3(InputAction.CallbackContext context);
            void OnKey4(InputAction.CallbackContext context);
            void OnKey5(InputAction.CallbackContext context);
            void OnKey6(InputAction.CallbackContext context);
            void OnKey7(InputAction.CallbackContext context);
            void OnKey8(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnPoint(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
        }
    }
}
