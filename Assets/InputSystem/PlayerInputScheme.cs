//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/InputSystem/PlayerInputScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PlayerInput
{
    public partial class @PlayerInputScheme: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputScheme()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputScheme"",
    ""maps"": [
        {
            ""name"": ""PlayerControl"",
            ""id"": ""939cc891-7637-4921-98aa-f045dab4b2d9"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ff765002-f552-4459-b2cb-e0f63fecae32"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""isRunning"",
                    ""type"": ""Button"",
                    ""id"": ""9800ac08-f74e-49ee-85b7-a2815440a346"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""450b748e-6c33-4ef0-abb8-df716b82cf3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""78d90272-9e2a-43f8-978d-98592c14a7ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Intaract"",
                    ""type"": ""Button"",
                    ""id"": ""19837682-50f2-4c81-9ea7-a204e21ee52e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""85b2068b-04a0-4ca4-b439-8f0d257e1882"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ef7ad39c-a6dd-4e0f-b497-126f86f7d9f6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""54214e8c-b1f0-475d-8fc1-5c2a483c727c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1b19375b-2d50-4827-ba23-40d99915f10e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5b4124ae-ccd2-440e-bc9b-0b57a1ace2f6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3cb74bc9-c1f0-41a8-95c2-406afd4ee19a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68054dfa-b2b4-4723-8e01-22d64dde2cbe"",
                    ""path"": ""<Keyboard>/capsLock"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""isRunning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3ad1d3f-3c84-490b-bb35-74cc4f418cbd"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""isRunning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c30114d6-b097-4495-8c0c-829d26532528"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2fc881e-5295-41cd-bc5c-1e4776c594d0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2a5dc18-3d19-4a7e-af80-6f5e64ac6dd0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Intaract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76a1388c-9a82-4ca4-b71a-07971263474f"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Intaract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5f9a665-7fcd-4ba8-804c-4ee6e78699fc"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ada5b00-10cb-4a28-a29d-4f74b2a47390"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraControl"",
            ""id"": ""519ad543-3c08-42e8-bed4-9e13fdbfc92c"",
            ""actions"": [
                {
                    ""name"": ""MouseMovement"",
                    ""type"": ""Value"",
                    ""id"": ""a924b1df-0007-406d-a26e-0f7a574f22c2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""9bcc3278-679d-4b9c-815e-7a96c4da801b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotationSticks"",
                    ""type"": ""Value"",
                    ""id"": ""b405d617-6d48-408a-a066-c8f7e0ba0ee6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReadyToZoom"",
                    ""type"": ""Button"",
                    ""id"": ""cf767db0-447b-49e7-9d2a-845eb5b64c2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomIn"",
                    ""type"": ""Button"",
                    ""id"": ""b95482fe-018e-45a2-a711-a017ef07f90e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomOut"",
                    ""type"": ""Button"",
                    ""id"": ""ea6121d9-1646-4f83-a77f-f16c08a6afcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7e35461-ec17-4b64-aeb4-69bdef508a83"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MouseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68f775d0-a570-4b72-b68f-e5641b9cd798"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06a2288f-d82c-4182-89ad-4140a81c6bee"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RotationSticks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61964aee-780e-4d49-8531-7c03f2aa5100"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ReadyToZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efaf7461-0513-477a-a7fc-d8ebe3608ae6"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ZoomIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da051119-0aea-47d2-ada0-84c4b60b1431"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ApplicationControl"",
            ""id"": ""34d51931-afde-4e8b-a503-7d8825595cd1"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""36d7a0b9-f66b-4da4-985e-ca871ac90791"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EditorGamemodeQuit"",
                    ""type"": ""Button"",
                    ""id"": ""a76818ba-a7bd-47b9-ad6f-43d1118501d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e26e6917-cb9c-4f53-85d1-27f900825ce2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""502961b9-dd2e-4dbb-b448-fa143201f2ae"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e05d031-3b40-44fe-8218-f0cdd3099992"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""EditorGamemodeQuit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InventoryControl"",
            ""id"": ""5c042f3d-b086-4d60-a79b-e4d6f44cb36b"",
            ""actions"": [
                {
                    ""name"": ""OpenCloseInventory"",
                    ""type"": ""Button"",
                    ""id"": ""13bfbd15-35dc-4065-a98b-dbce81aea80f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key1"",
                    ""type"": ""Button"",
                    ""id"": ""219db42c-fd51-4806-99d4-f34613161ce0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key2"",
                    ""type"": ""Button"",
                    ""id"": ""490e6fe9-8d90-4b3c-87b2-566ecdc18590"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key3"",
                    ""type"": ""Button"",
                    ""id"": ""6ce549b3-706d-475f-9185-4a505cd7b73f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key4"",
                    ""type"": ""Button"",
                    ""id"": ""893f5a99-fa51-4fe7-8d1e-11e829d84aba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key5"",
                    ""type"": ""Button"",
                    ""id"": ""3299c4ec-aa91-4e89-8c1e-f4b369d90a1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key6"",
                    ""type"": ""Button"",
                    ""id"": ""b689bbdd-c73f-454b-adce-b1904c9511a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key7"",
                    ""type"": ""Button"",
                    ""id"": ""0ff6e13f-4ffb-4de9-97b3-8636906dcfbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key8"",
                    ""type"": ""Button"",
                    ""id"": ""fc05cce8-606b-4592-8c78-b995bbcf9c3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArrow"",
                    ""type"": ""Button"",
                    ""id"": ""17d151da-4790-4756-ab27-1c3b5196c5e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArrow"",
                    ""type"": ""Button"",
                    ""id"": ""ed72e88a-1efe-4a5b-ba67-3e604e2e8e04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a6951f8b-ad28-4892-894a-ea7436b95d48"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""OpenCloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e140362f-3b23-414f-9203-233f6cb41382"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""OpenCloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""469d82ab-795c-4061-ba74-0f8a16472287"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9251154-2094-430e-9925-5ea15cb94b6d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7da881f5-d7bb-4bf6-8c4d-5bc7a87b4688"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51a3f551-f491-4a8c-b223-0a853872d15d"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""490fc7c4-d085-4754-8502-7a84c1dc0cc8"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51fbcaea-f07e-4d2f-ba1b-888dbd53006a"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08c273e0-5f3e-4086-8484-c06fb10575ca"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9998be85-b5f1-4ca8-bbec-6a4746b9f303"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7924f9b-6afe-44d9-9886-5e16bcbdc520"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LeftArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f733a9f-ede3-4f32-87c2-d3f06744c386"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""730a6b2a-756e-4c2e-b840-f9f9f4cb0a0e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RightArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6683234c-2c4a-4e60-96d3-908c05ba89eb"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""4beb2adc-ed30-464c-bf5c-d5b72841b867"",
            ""actions"": [
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""1286ea09-4e27-4136-b386-a7dc7e93d9c8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""e59e4a22-a27e-445e-8f5d-8e409e2def20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GamepadVirtualMousePoint"",
                    ""type"": ""Value"",
                    ""id"": ""700c583a-44ef-4373-bf9b-22ef8778ef05"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GamepadVirtualMouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""55338ed2-2a01-4a5f-a732-3e760626c653"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""ab8f1788-06dd-4c59-8079-44754c98b922"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""b466b936-7244-4400-857f-7015bdb09fe0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VirtualMousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""8c302ed1-c2ab-4355-b7ce-c3bc4e2c62f8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""727080a0-abed-44e8-9918-28e9099d545f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""aa29d8bd-ff61-4daf-94b0-532364249150"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f66a0b9-e7f3-4233-98ef-87b12d4f05bb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0ef33bf-c4c6-4c37-b55d-fb392c7e8fc0"",
                    ""path"": ""<VirtualMouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2030f5af-2aff-4d29-9377-35189d9481ff"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fb5904b-2d45-4394-8ab5-5069f1f78360"",
                    ""path"": ""<VirtualMouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c2d043a-e77c-48ce-8f9e-8c83b296f744"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""GamepadVirtualMousePoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f57c4ba-babb-4a10-a2d0-27e5498bb0af"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""GamepadVirtualMouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ede1596d-6c8d-4242-a6bf-f9ee43c48e8d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b389c97-5174-4a40-b23d-be6b800ba487"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f00177f7-b108-4bc9-b389-512f093ab7fb"",
                    ""path"": ""<VirtualMouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""VirtualMousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9481f2c5-34b5-401a-89bc-63a3cba98f44"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""a9771643-c567-489e-87c7-dfcfd747de02"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ea4a4180-bc34-4b64-b451-54675ccd2499"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""da65d3a0-503c-4a4d-a007-57fe6f00e6e0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1618c69f-21c7-438b-88bb-714349b64458"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""90e7863f-0fe6-4cb1-8f0b-d2ee5c458b32"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GamepadArrows"",
                    ""id"": ""176ea44d-7894-4c22-b1fe-b8e086048a29"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1b2c6972-e318-4b11-a576-cef07d5c6fa7"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3c789d98-9132-4556-8eba-1dff08a4ba3a"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cf26871e-353b-4bcf-9014-4589e7ac176f"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""54dfe09b-f117-4889-a9f4-4319cd1c3456"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4c8635d9-c9a5-4e5d-bd1f-cc2476ce3ca4"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdf6dadd-3747-4911-9a65-17cf5fb8e17c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // PlayerControl
            m_PlayerControl = asset.FindActionMap("PlayerControl", throwIfNotFound: true);
            m_PlayerControl_Movement = m_PlayerControl.FindAction("Movement", throwIfNotFound: true);
            m_PlayerControl_isRunning = m_PlayerControl.FindAction("isRunning", throwIfNotFound: true);
            m_PlayerControl_Dash = m_PlayerControl.FindAction("Dash", throwIfNotFound: true);
            m_PlayerControl_Jump = m_PlayerControl.FindAction("Jump", throwIfNotFound: true);
            m_PlayerControl_Intaract = m_PlayerControl.FindAction("Intaract", throwIfNotFound: true);
            // CameraControl
            m_CameraControl = asset.FindActionMap("CameraControl", throwIfNotFound: true);
            m_CameraControl_MouseMovement = m_CameraControl.FindAction("MouseMovement", throwIfNotFound: true);
            m_CameraControl_Zoom = m_CameraControl.FindAction("Zoom", throwIfNotFound: true);
            m_CameraControl_RotationSticks = m_CameraControl.FindAction("RotationSticks", throwIfNotFound: true);
            m_CameraControl_ReadyToZoom = m_CameraControl.FindAction("ReadyToZoom", throwIfNotFound: true);
            m_CameraControl_ZoomIn = m_CameraControl.FindAction("ZoomIn", throwIfNotFound: true);
            m_CameraControl_ZoomOut = m_CameraControl.FindAction("ZoomOut", throwIfNotFound: true);
            // ApplicationControl
            m_ApplicationControl = asset.FindActionMap("ApplicationControl", throwIfNotFound: true);
            m_ApplicationControl_Escape = m_ApplicationControl.FindAction("Escape", throwIfNotFound: true);
            m_ApplicationControl_EditorGamemodeQuit = m_ApplicationControl.FindAction("EditorGamemodeQuit", throwIfNotFound: true);
            // InventoryControl
            m_InventoryControl = asset.FindActionMap("InventoryControl", throwIfNotFound: true);
            m_InventoryControl_OpenCloseInventory = m_InventoryControl.FindAction("OpenCloseInventory", throwIfNotFound: true);
            m_InventoryControl_Key1 = m_InventoryControl.FindAction("Key1", throwIfNotFound: true);
            m_InventoryControl_Key2 = m_InventoryControl.FindAction("Key2", throwIfNotFound: true);
            m_InventoryControl_Key3 = m_InventoryControl.FindAction("Key3", throwIfNotFound: true);
            m_InventoryControl_Key4 = m_InventoryControl.FindAction("Key4", throwIfNotFound: true);
            m_InventoryControl_Key5 = m_InventoryControl.FindAction("Key5", throwIfNotFound: true);
            m_InventoryControl_Key6 = m_InventoryControl.FindAction("Key6", throwIfNotFound: true);
            m_InventoryControl_Key7 = m_InventoryControl.FindAction("Key7", throwIfNotFound: true);
            m_InventoryControl_Key8 = m_InventoryControl.FindAction("Key8", throwIfNotFound: true);
            m_InventoryControl_LeftArrow = m_InventoryControl.FindAction("LeftArrow", throwIfNotFound: true);
            m_InventoryControl_RightArrow = m_InventoryControl.FindAction("RightArrow", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
            m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
            m_UI_GamepadVirtualMousePoint = m_UI.FindAction("GamepadVirtualMousePoint", throwIfNotFound: true);
            m_UI_GamepadVirtualMouseClick = m_UI.FindAction("GamepadVirtualMouseClick", throwIfNotFound: true);
            m_UI_MouseDelta = m_UI.FindAction("MouseDelta", throwIfNotFound: true);
            m_UI_MousePosition = m_UI.FindAction("MousePosition", throwIfNotFound: true);
            m_UI_VirtualMousePosition = m_UI.FindAction("VirtualMousePosition", throwIfNotFound: true);
            m_UI_Move = m_UI.FindAction("Move", throwIfNotFound: true);
            m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerControl
        private readonly InputActionMap m_PlayerControl;
        private List<IPlayerControlActions> m_PlayerControlActionsCallbackInterfaces = new List<IPlayerControlActions>();
        private readonly InputAction m_PlayerControl_Movement;
        private readonly InputAction m_PlayerControl_isRunning;
        private readonly InputAction m_PlayerControl_Dash;
        private readonly InputAction m_PlayerControl_Jump;
        private readonly InputAction m_PlayerControl_Intaract;
        public struct PlayerControlActions
        {
            private @PlayerInputScheme m_Wrapper;
            public PlayerControlActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerControl_Movement;
            public InputAction @isRunning => m_Wrapper.m_PlayerControl_isRunning;
            public InputAction @Dash => m_Wrapper.m_PlayerControl_Dash;
            public InputAction @Jump => m_Wrapper.m_PlayerControl_Jump;
            public InputAction @Intaract => m_Wrapper.m_PlayerControl_Intaract;
            public InputActionMap Get() { return m_Wrapper.m_PlayerControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerControlActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerControlActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @isRunning.started += instance.OnIsRunning;
                @isRunning.performed += instance.OnIsRunning;
                @isRunning.canceled += instance.OnIsRunning;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Intaract.started += instance.OnIntaract;
                @Intaract.performed += instance.OnIntaract;
                @Intaract.canceled += instance.OnIntaract;
            }

            private void UnregisterCallbacks(IPlayerControlActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @isRunning.started -= instance.OnIsRunning;
                @isRunning.performed -= instance.OnIsRunning;
                @isRunning.canceled -= instance.OnIsRunning;
                @Dash.started -= instance.OnDash;
                @Dash.performed -= instance.OnDash;
                @Dash.canceled -= instance.OnDash;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Intaract.started -= instance.OnIntaract;
                @Intaract.performed -= instance.OnIntaract;
                @Intaract.canceled -= instance.OnIntaract;
            }

            public void RemoveCallbacks(IPlayerControlActions instance)
            {
                if (m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerControlActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerControlActions @PlayerControl => new PlayerControlActions(this);

        // CameraControl
        private readonly InputActionMap m_CameraControl;
        private List<ICameraControlActions> m_CameraControlActionsCallbackInterfaces = new List<ICameraControlActions>();
        private readonly InputAction m_CameraControl_MouseMovement;
        private readonly InputAction m_CameraControl_Zoom;
        private readonly InputAction m_CameraControl_RotationSticks;
        private readonly InputAction m_CameraControl_ReadyToZoom;
        private readonly InputAction m_CameraControl_ZoomIn;
        private readonly InputAction m_CameraControl_ZoomOut;
        public struct CameraControlActions
        {
            private @PlayerInputScheme m_Wrapper;
            public CameraControlActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
            public InputAction @MouseMovement => m_Wrapper.m_CameraControl_MouseMovement;
            public InputAction @Zoom => m_Wrapper.m_CameraControl_Zoom;
            public InputAction @RotationSticks => m_Wrapper.m_CameraControl_RotationSticks;
            public InputAction @ReadyToZoom => m_Wrapper.m_CameraControl_ReadyToZoom;
            public InputAction @ZoomIn => m_Wrapper.m_CameraControl_ZoomIn;
            public InputAction @ZoomOut => m_Wrapper.m_CameraControl_ZoomOut;
            public InputActionMap Get() { return m_Wrapper.m_CameraControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraControlActions set) { return set.Get(); }
            public void AddCallbacks(ICameraControlActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraControlActionsCallbackInterfaces.Add(instance);
                @MouseMovement.started += instance.OnMouseMovement;
                @MouseMovement.performed += instance.OnMouseMovement;
                @MouseMovement.canceled += instance.OnMouseMovement;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @RotationSticks.started += instance.OnRotationSticks;
                @RotationSticks.performed += instance.OnRotationSticks;
                @RotationSticks.canceled += instance.OnRotationSticks;
                @ReadyToZoom.started += instance.OnReadyToZoom;
                @ReadyToZoom.performed += instance.OnReadyToZoom;
                @ReadyToZoom.canceled += instance.OnReadyToZoom;
                @ZoomIn.started += instance.OnZoomIn;
                @ZoomIn.performed += instance.OnZoomIn;
                @ZoomIn.canceled += instance.OnZoomIn;
                @ZoomOut.started += instance.OnZoomOut;
                @ZoomOut.performed += instance.OnZoomOut;
                @ZoomOut.canceled += instance.OnZoomOut;
            }

            private void UnregisterCallbacks(ICameraControlActions instance)
            {
                @MouseMovement.started -= instance.OnMouseMovement;
                @MouseMovement.performed -= instance.OnMouseMovement;
                @MouseMovement.canceled -= instance.OnMouseMovement;
                @Zoom.started -= instance.OnZoom;
                @Zoom.performed -= instance.OnZoom;
                @Zoom.canceled -= instance.OnZoom;
                @RotationSticks.started -= instance.OnRotationSticks;
                @RotationSticks.performed -= instance.OnRotationSticks;
                @RotationSticks.canceled -= instance.OnRotationSticks;
                @ReadyToZoom.started -= instance.OnReadyToZoom;
                @ReadyToZoom.performed -= instance.OnReadyToZoom;
                @ReadyToZoom.canceled -= instance.OnReadyToZoom;
                @ZoomIn.started -= instance.OnZoomIn;
                @ZoomIn.performed -= instance.OnZoomIn;
                @ZoomIn.canceled -= instance.OnZoomIn;
                @ZoomOut.started -= instance.OnZoomOut;
                @ZoomOut.performed -= instance.OnZoomOut;
                @ZoomOut.canceled -= instance.OnZoomOut;
            }

            public void RemoveCallbacks(ICameraControlActions instance)
            {
                if (m_Wrapper.m_CameraControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraControlActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraControlActions @CameraControl => new CameraControlActions(this);

        // ApplicationControl
        private readonly InputActionMap m_ApplicationControl;
        private List<IApplicationControlActions> m_ApplicationControlActionsCallbackInterfaces = new List<IApplicationControlActions>();
        private readonly InputAction m_ApplicationControl_Escape;
        private readonly InputAction m_ApplicationControl_EditorGamemodeQuit;
        public struct ApplicationControlActions
        {
            private @PlayerInputScheme m_Wrapper;
            public ApplicationControlActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
            public InputAction @Escape => m_Wrapper.m_ApplicationControl_Escape;
            public InputAction @EditorGamemodeQuit => m_Wrapper.m_ApplicationControl_EditorGamemodeQuit;
            public InputActionMap Get() { return m_Wrapper.m_ApplicationControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ApplicationControlActions set) { return set.Get(); }
            public void AddCallbacks(IApplicationControlActions instance)
            {
                if (instance == null || m_Wrapper.m_ApplicationControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ApplicationControlActionsCallbackInterfaces.Add(instance);
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @EditorGamemodeQuit.started += instance.OnEditorGamemodeQuit;
                @EditorGamemodeQuit.performed += instance.OnEditorGamemodeQuit;
                @EditorGamemodeQuit.canceled += instance.OnEditorGamemodeQuit;
            }

            private void UnregisterCallbacks(IApplicationControlActions instance)
            {
                @Escape.started -= instance.OnEscape;
                @Escape.performed -= instance.OnEscape;
                @Escape.canceled -= instance.OnEscape;
                @EditorGamemodeQuit.started -= instance.OnEditorGamemodeQuit;
                @EditorGamemodeQuit.performed -= instance.OnEditorGamemodeQuit;
                @EditorGamemodeQuit.canceled -= instance.OnEditorGamemodeQuit;
            }

            public void RemoveCallbacks(IApplicationControlActions instance)
            {
                if (m_Wrapper.m_ApplicationControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IApplicationControlActions instance)
            {
                foreach (var item in m_Wrapper.m_ApplicationControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ApplicationControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ApplicationControlActions @ApplicationControl => new ApplicationControlActions(this);

        // InventoryControl
        private readonly InputActionMap m_InventoryControl;
        private List<IInventoryControlActions> m_InventoryControlActionsCallbackInterfaces = new List<IInventoryControlActions>();
        private readonly InputAction m_InventoryControl_OpenCloseInventory;
        private readonly InputAction m_InventoryControl_Key1;
        private readonly InputAction m_InventoryControl_Key2;
        private readonly InputAction m_InventoryControl_Key3;
        private readonly InputAction m_InventoryControl_Key4;
        private readonly InputAction m_InventoryControl_Key5;
        private readonly InputAction m_InventoryControl_Key6;
        private readonly InputAction m_InventoryControl_Key7;
        private readonly InputAction m_InventoryControl_Key8;
        private readonly InputAction m_InventoryControl_LeftArrow;
        private readonly InputAction m_InventoryControl_RightArrow;
        public struct InventoryControlActions
        {
            private @PlayerInputScheme m_Wrapper;
            public InventoryControlActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
            public InputAction @OpenCloseInventory => m_Wrapper.m_InventoryControl_OpenCloseInventory;
            public InputAction @Key1 => m_Wrapper.m_InventoryControl_Key1;
            public InputAction @Key2 => m_Wrapper.m_InventoryControl_Key2;
            public InputAction @Key3 => m_Wrapper.m_InventoryControl_Key3;
            public InputAction @Key4 => m_Wrapper.m_InventoryControl_Key4;
            public InputAction @Key5 => m_Wrapper.m_InventoryControl_Key5;
            public InputAction @Key6 => m_Wrapper.m_InventoryControl_Key6;
            public InputAction @Key7 => m_Wrapper.m_InventoryControl_Key7;
            public InputAction @Key8 => m_Wrapper.m_InventoryControl_Key8;
            public InputAction @LeftArrow => m_Wrapper.m_InventoryControl_LeftArrow;
            public InputAction @RightArrow => m_Wrapper.m_InventoryControl_RightArrow;
            public InputActionMap Get() { return m_Wrapper.m_InventoryControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InventoryControlActions set) { return set.Get(); }
            public void AddCallbacks(IInventoryControlActions instance)
            {
                if (instance == null || m_Wrapper.m_InventoryControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InventoryControlActionsCallbackInterfaces.Add(instance);
                @OpenCloseInventory.started += instance.OnOpenCloseInventory;
                @OpenCloseInventory.performed += instance.OnOpenCloseInventory;
                @OpenCloseInventory.canceled += instance.OnOpenCloseInventory;
                @Key1.started += instance.OnKey1;
                @Key1.performed += instance.OnKey1;
                @Key1.canceled += instance.OnKey1;
                @Key2.started += instance.OnKey2;
                @Key2.performed += instance.OnKey2;
                @Key2.canceled += instance.OnKey2;
                @Key3.started += instance.OnKey3;
                @Key3.performed += instance.OnKey3;
                @Key3.canceled += instance.OnKey3;
                @Key4.started += instance.OnKey4;
                @Key4.performed += instance.OnKey4;
                @Key4.canceled += instance.OnKey4;
                @Key5.started += instance.OnKey5;
                @Key5.performed += instance.OnKey5;
                @Key5.canceled += instance.OnKey5;
                @Key6.started += instance.OnKey6;
                @Key6.performed += instance.OnKey6;
                @Key6.canceled += instance.OnKey6;
                @Key7.started += instance.OnKey7;
                @Key7.performed += instance.OnKey7;
                @Key7.canceled += instance.OnKey7;
                @Key8.started += instance.OnKey8;
                @Key8.performed += instance.OnKey8;
                @Key8.canceled += instance.OnKey8;
                @LeftArrow.started += instance.OnLeftArrow;
                @LeftArrow.performed += instance.OnLeftArrow;
                @LeftArrow.canceled += instance.OnLeftArrow;
                @RightArrow.started += instance.OnRightArrow;
                @RightArrow.performed += instance.OnRightArrow;
                @RightArrow.canceled += instance.OnRightArrow;
            }

            private void UnregisterCallbacks(IInventoryControlActions instance)
            {
                @OpenCloseInventory.started -= instance.OnOpenCloseInventory;
                @OpenCloseInventory.performed -= instance.OnOpenCloseInventory;
                @OpenCloseInventory.canceled -= instance.OnOpenCloseInventory;
                @Key1.started -= instance.OnKey1;
                @Key1.performed -= instance.OnKey1;
                @Key1.canceled -= instance.OnKey1;
                @Key2.started -= instance.OnKey2;
                @Key2.performed -= instance.OnKey2;
                @Key2.canceled -= instance.OnKey2;
                @Key3.started -= instance.OnKey3;
                @Key3.performed -= instance.OnKey3;
                @Key3.canceled -= instance.OnKey3;
                @Key4.started -= instance.OnKey4;
                @Key4.performed -= instance.OnKey4;
                @Key4.canceled -= instance.OnKey4;
                @Key5.started -= instance.OnKey5;
                @Key5.performed -= instance.OnKey5;
                @Key5.canceled -= instance.OnKey5;
                @Key6.started -= instance.OnKey6;
                @Key6.performed -= instance.OnKey6;
                @Key6.canceled -= instance.OnKey6;
                @Key7.started -= instance.OnKey7;
                @Key7.performed -= instance.OnKey7;
                @Key7.canceled -= instance.OnKey7;
                @Key8.started -= instance.OnKey8;
                @Key8.performed -= instance.OnKey8;
                @Key8.canceled -= instance.OnKey8;
                @LeftArrow.started -= instance.OnLeftArrow;
                @LeftArrow.performed -= instance.OnLeftArrow;
                @LeftArrow.canceled -= instance.OnLeftArrow;
                @RightArrow.started -= instance.OnRightArrow;
                @RightArrow.performed -= instance.OnRightArrow;
                @RightArrow.canceled -= instance.OnRightArrow;
            }

            public void RemoveCallbacks(IInventoryControlActions instance)
            {
                if (m_Wrapper.m_InventoryControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInventoryControlActions instance)
            {
                foreach (var item in m_Wrapper.m_InventoryControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InventoryControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InventoryControlActions @InventoryControl => new InventoryControlActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_Point;
        private readonly InputAction m_UI_Click;
        private readonly InputAction m_UI_GamepadVirtualMousePoint;
        private readonly InputAction m_UI_GamepadVirtualMouseClick;
        private readonly InputAction m_UI_MouseDelta;
        private readonly InputAction m_UI_MousePosition;
        private readonly InputAction m_UI_VirtualMousePosition;
        private readonly InputAction m_UI_Move;
        private readonly InputAction m_UI_Submit;
        public struct UIActions
        {
            private @PlayerInputScheme m_Wrapper;
            public UIActions(@PlayerInputScheme wrapper) { m_Wrapper = wrapper; }
            public InputAction @Point => m_Wrapper.m_UI_Point;
            public InputAction @Click => m_Wrapper.m_UI_Click;
            public InputAction @GamepadVirtualMousePoint => m_Wrapper.m_UI_GamepadVirtualMousePoint;
            public InputAction @GamepadVirtualMouseClick => m_Wrapper.m_UI_GamepadVirtualMouseClick;
            public InputAction @MouseDelta => m_Wrapper.m_UI_MouseDelta;
            public InputAction @MousePosition => m_Wrapper.m_UI_MousePosition;
            public InputAction @VirtualMousePosition => m_Wrapper.m_UI_VirtualMousePosition;
            public InputAction @Move => m_Wrapper.m_UI_Move;
            public InputAction @Submit => m_Wrapper.m_UI_Submit;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @GamepadVirtualMousePoint.started += instance.OnGamepadVirtualMousePoint;
                @GamepadVirtualMousePoint.performed += instance.OnGamepadVirtualMousePoint;
                @GamepadVirtualMousePoint.canceled += instance.OnGamepadVirtualMousePoint;
                @GamepadVirtualMouseClick.started += instance.OnGamepadVirtualMouseClick;
                @GamepadVirtualMouseClick.performed += instance.OnGamepadVirtualMouseClick;
                @GamepadVirtualMouseClick.canceled += instance.OnGamepadVirtualMouseClick;
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @VirtualMousePosition.started += instance.OnVirtualMousePosition;
                @VirtualMousePosition.performed += instance.OnVirtualMousePosition;
                @VirtualMousePosition.canceled += instance.OnVirtualMousePosition;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @GamepadVirtualMousePoint.started -= instance.OnGamepadVirtualMousePoint;
                @GamepadVirtualMousePoint.performed -= instance.OnGamepadVirtualMousePoint;
                @GamepadVirtualMousePoint.canceled -= instance.OnGamepadVirtualMousePoint;
                @GamepadVirtualMouseClick.started -= instance.OnGamepadVirtualMouseClick;
                @GamepadVirtualMouseClick.performed -= instance.OnGamepadVirtualMouseClick;
                @GamepadVirtualMouseClick.canceled -= instance.OnGamepadVirtualMouseClick;
                @MouseDelta.started -= instance.OnMouseDelta;
                @MouseDelta.performed -= instance.OnMouseDelta;
                @MouseDelta.canceled -= instance.OnMouseDelta;
                @MousePosition.started -= instance.OnMousePosition;
                @MousePosition.performed -= instance.OnMousePosition;
                @MousePosition.canceled -= instance.OnMousePosition;
                @VirtualMousePosition.started -= instance.OnVirtualMousePosition;
                @VirtualMousePosition.performed -= instance.OnVirtualMousePosition;
                @VirtualMousePosition.canceled -= instance.OnVirtualMousePosition;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Submit.started -= instance.OnSubmit;
                @Submit.performed -= instance.OnSubmit;
                @Submit.canceled -= instance.OnSubmit;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IPlayerControlActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnIsRunning(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnIntaract(InputAction.CallbackContext context);
        }
        public interface ICameraControlActions
        {
            void OnMouseMovement(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
            void OnRotationSticks(InputAction.CallbackContext context);
            void OnReadyToZoom(InputAction.CallbackContext context);
            void OnZoomIn(InputAction.CallbackContext context);
            void OnZoomOut(InputAction.CallbackContext context);
        }
        public interface IApplicationControlActions
        {
            void OnEscape(InputAction.CallbackContext context);
            void OnEditorGamemodeQuit(InputAction.CallbackContext context);
        }
        public interface IInventoryControlActions
        {
            void OnOpenCloseInventory(InputAction.CallbackContext context);
            void OnKey1(InputAction.CallbackContext context);
            void OnKey2(InputAction.CallbackContext context);
            void OnKey3(InputAction.CallbackContext context);
            void OnKey4(InputAction.CallbackContext context);
            void OnKey5(InputAction.CallbackContext context);
            void OnKey6(InputAction.CallbackContext context);
            void OnKey7(InputAction.CallbackContext context);
            void OnKey8(InputAction.CallbackContext context);
            void OnLeftArrow(InputAction.CallbackContext context);
            void OnRightArrow(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnPoint(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnGamepadVirtualMousePoint(InputAction.CallbackContext context);
            void OnGamepadVirtualMouseClick(InputAction.CallbackContext context);
            void OnMouseDelta(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
            void OnVirtualMousePosition(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnSubmit(InputAction.CallbackContext context);
        }
    }
}
